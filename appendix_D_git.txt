----------------------------------
1、在linux中安装git：
sudo apt-get install git


----------------------------------
2、配置git。
项目成员们提供用户名、电子邮箱地址（可以虚构）。这样git就会跟踪谁修改啦项目，即便项目成员只有你一个人。
通过配置git来给git提供用户名、电子邮箱地址：
$ git config --global user.name "zbr"
$ git config --global user.email "346536362@qq.com"


----------------------------------
3、创建要跟踪版本的测试项目。
创建一个文件夹git_practice。
在其中创建一个hello_world.py文档


----------------------------------
4、某些文件夹是不需要跟踪可以忽略的，在git_practice文件夹中建立一个文件.gitignore。这个文件夹没有后缀，以句点开头。将git_practice文件夹中要忽略的文件夹名写入这个特殊文件中，比如:lalanono/

书中说会有一种.pyc文件，谁根据.py文件自动生成的，并且这些文件都存储在__pycache__文件夹中。但是，我没有发现啊。


----------------------------------
5、初始化仓库。
在git_practice文件夹打开终端运行：git init
就会创建一个仓库文件夹.git/
git用来管理仓库的文件都存在这里。


----------------------------------
6、执行其他操作之前，查看一下项目的状态：
在git_practice文件夹打开终端运行：git status
要理解跳出的信息的3个核心内容：所在分支、项目中未被跟踪的文件、加入到仓库中准备用于提交（commit）的内容
并不是位于此文件夹中的文件都是用于提交的，需要明确的“添加”，即下面的第7步。


----------------------------------
7、将文件加入到仓库中。
在git_practice文件夹打开终端运行：git add .
就会将项目中未被跟踪的所有文件都加入到仓库中。加入并不是提交，提交要另外操作，目前它只是让Git开始能关注到这些文件。
此时再查看项目状态就会看到不一样了。


----------------------------------
8、执行提交.
在git_practice文件夹打开终端运行：git commit -m "Started project."
以上就完成项目的快照。
-m让Git将接下来的消息"Started project."记录到项目的历史记录中。


----------------------------------
9、查看提交的历史记录.
在git_practice文件夹打开终端运行：git log


----------------------------------
10、为了体验版本控制功能，外卖修改hello_world.py文件的内容：增加随便一行代码。

然后再查看项目状态（git status）:当前所在分支、被修改的文件、并指出来所做修改还未提交（commit）
此处说明修改的都是之前有的文件，而没有新增的，有新增会提示还有没有加入的文件。加入（add）、提交（commit）是不一样的。有新的文件要先加入（可以直接git add . 将文件全部加入），再来提交。

查看完状态，我们来执行提交：git commit -am "extended greeting"
标志-a让git将仓库中所有修改了的文件都加入到当前（当前是接下来即将做的意思）提交中。
标志-m和上面一样是让git在提交中记录一条信息，以便我们后续看得懂此次提交的主要内容。

然后再查看项目状态（git status）

然后：git log --pretty=oneline
就会一行显示一次commit的log记录，把所有记录都一条条显示出来。


----------------------------------
11、撤销对项目文件的修改，回到之前某次commit的快照处（当时会commit说明功能运行是正常的，只是这次对文件的修改不满意或者出现问题，想一切回到快照的那个瞬间）。

故意再修改hello_world.py文件的内容，增加一行代码：print('I should disapear')

git status后看到git已经注意到修改。但是我们这次不提交，我们要恢复到最后一个提交的状态（一般提交的都是能改运行的状态）。

不需要对hello_world.py文件做任何修改。
在git_practice文件夹打开终端运行：git checkout .
git checkout能够让你恢复到以前任何提交的状态。
而我们这次的git checkout . 将项目恢复到最后一次提交的状态。


----------------------------------
恢复到以前的快照状态，谁通过执行git checkout，所以恢复行为我们称之为检出。
要检出（恢复）到以前的某个状态：

一、git log --pretty=oneline

二、checkout某个log，通过某次commit的ID的前6个字符，比如：git checkout be017b
此时终端信息会提示，我们处于‘detached HEAD’分离头指针状态（分离-头指针）。
还提示我们可以建立一个分支来保存commits？

三、所谓分离头指针状态，就是说我们离开了一个命名分支（此时是master）。
要回到master分支，可以检出它：git checkout master
这样检出后到底恢复到当时的状态来吗？书上说此时检出到以前的提交了，接下来最好不要对项目做任何修改。
到底恢复来吗？不可做修改，检出以前的状态要干嘛？

四、如果项目开发只是你一个人做，而且又想放弃较近的所有提交并恢复到以前的状态（第三步中不是这样来吗？），可以将项目重置到以前的提交：
git status

git log --pretty=oneline

git reset --hard be017b

git status

git log --pretty=oneline


----------------------------------
git checkout主要有三个作用：
第一个就是切换分支。例如你从远程仓库clone下来所有的源代码，你git branch一下会看到你通常是在master，如果你想切换到某一个分支上呢？git checkout <branchname>
第二个就是放弃对某个文件的修改。例如你想放弃对某个文件Hello.cpp的修改，git checkout -- <Hello.cpp>
第三个就是新建一个分支，git checkout <-b> <branchname>，不加-b的话只新建不切换到新的分支上，加-b新建并切换到该分支上
git reset主要是取消上一次的操作，具体用法有很多，说两个：
第一个取消merge，git reset --hard ORIG_HEAD，这样会退回到merge前的代码。
第二个就是取消commit，git eset HEAD~<num> <-soft/-hard>，取消上num次的commit
第三个是将文件从stage（追踪的库）中移除，git reset HEAD <filename>
git和linux命令一样，非常的繁复，需要一点一点的学习，下面有个教程网站，非常不错，你遇到问题可以去看一下，比百度知道要权威多了
http://git-scm.com/book/zh/v1


----------------------------------
有时候仓库乱了，你不想要之前的commit提交记录了。

可以直接删除目录/.git文件，这不会影响任何文件的当前状态，只会删除所有的commit提交，然后重新建仓库；

也可以在命令行中操作：
git status
rm -rf .git
git status
git init
git status
git add .
git commit -m "Starteing over."
git status



